@page "/"
@using Notess.Models
@using Notess.Services
@rendermode InteractiveServer

@inject TodoService _todoService
@inject IHttpContextAccessor _httpContextAccessor

<PageTitle>Home</PageTitle>

<div class="container align-items-center justify-content-center w-25">
    <h3>
        Todo list
        <h4 class="text-muted">count: @Todos.Count</h4>
    </h3>

    <div class="input-group mb-3">
        <input type="text"
               class="form-control"
               placeholder="Todo title"
               @bind="Title" @bind:event="oninput"
               @onkeydown="@AddTodoWithEnter">
        <div class="input-group-append">
            <button class="btn btn-outline-primary" style="background: #FFFFFF"
                    type="button"
                    @onclick="AddTodo"
                    disabled="@IsAddTodoDisabled">
                Add
            </button>
        </div>
    </div>

    <div class="container d-flex flex-md-column-reverse">
        @foreach (var todo in Todos)
        {
            <div class="card mt-2 mb-2 w-100">
                <div class="card-body d-flex flex-md-column" @onkeydown="@(e => OnTodoKeyDown(e, todo))">
                    <h4 class="card-title mt-2 mb-2" hidden="@todo.IsEditing"
                        @ondblclick="@todo.ToggleEditing">
                        @todo.Title
                    </h4>

                    <label for="title@(todo.Id)" class="form-label" hidden="@(!todo.IsEditing)">Title</label>
                    <input id="title@(todo.Id)"
                           class="form-control mb-2"
                           type="text"
                           @bind="todo.EditTitle" @bind:event="oninput"
                           hidden="@(!todo.IsEditing)"/>

                    <p class="card-text mt-2 mb-2"
                       hidden="@todo.IsEditing"
                       @ondblclick="@todo.ToggleEditing">
                        @((MarkupString)string.Join("<br />", todo.Content.Split('\n', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)))
                    </p>

                    <label for="content@(todo.Id)" class="form-label" hidden="@(!todo.IsEditing)">Content</label>
                    <textarea
                        id="content@(todo.Id)"
                        style="field-sizing: content;"
                        class="form-control mb-2"
                        @bind="todo.EditContent" @bind:event="oninput"
                        hidden="@(!todo.IsEditing)"></textarea>

                    <div class="d-flex flex-md-row w-100">
                        <small class="text-muted align-self-start">@todo.CreatedDate</small>
                        <a href="" @onclick="@(() => RemoveTodo(todo))" style="margin-left: auto">Remove</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    /// <summary>
    /// A list of todo items.
    /// </summary>
    private List<TodoItem> Todos { get; set; } = [];

    /// <summary>
    /// The title of the current todo item.
    /// </summary>
    private string Title { get; set; } = "";

    /// <summary>
    /// Indicates whether adding a new todo item is disabled.
    /// </summary>
    private bool IsAddTodoDisabled => string.IsNullOrWhiteSpace(Title);

    /// <summary>
    /// Handles the "Enter" key press event to add a new todo item.
    /// </summary>
    /// <param name="e">The keyboard event arguments.</param>
    private void AddTodoWithEnter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            AddTodo();
        }
    }

    /// <summary>
    /// Adds a new todo item to the list.
    /// </summary>
    private void AddTodo()
    {
        if (IsAddTodoDisabled)
            return;

        var todo = new TodoItem(title: Title);

        AddTodo(todo);
        Todos.Add(todo);

        Title = "";
    }

    /// <summary>
    /// Handles the key down event for a todo item.
    /// </summary>
    /// <param name="e">The keyboard event arguments.</param>
    /// <param name="todo">The todo item that the event is associated with.</param>
    public void OnTodoKeyDown(KeyboardEventArgs e, TodoItem todo)
    {
        if (!todo.IsEditing)
            return;

        if (e is { Code: "Escape" })
            todo.ToggleEditing();

        if (e is { ShiftKey: false, Code: "Enter" or "NumpadEnter" })
        {
            todo.ToggleEditing();
            UpdateTodo(todo);
        }
    }

    /// <summary>
    /// Removes a todo item from the list.
    /// </summary>
    /// <param name="todo">The todo item to be removed.</param>
    private void RemoveTodo(TodoItem todo)
    {
        RemoveTodo(todo.Id);
        Todos.Remove(todo);
    }

}